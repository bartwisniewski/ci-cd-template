name: ci-cd
services:
  app:
    build:
      context: ../..
      dockerfile: Dockerfile
    container_name: ${APP_CONT_NAME}
    environment:
      - DJANGO_SETTINGS_MODULE=cicdproj.settings
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - HOST_NAME=${APP_CONT_NAME}
      - PORT=${APP_PORT}
      - DB_ENGINE=${DB_ENGINE}
      - DB_HOST=${DB_CONT_NAME}
      - DB_DB=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_PORT=${POSTGRES_PORT}
    entrypoint: [ "/bin/sh", "-c" ]
    command:
      - |
        python3 manage.py makemigrations
        python3 manage.py migrate
        python3 manage.py runserver 0.0.0.0:${APP_PORT}
    volumes:
      - ../../src/cicdproj/:/app/
    healthcheck:
      test: curl --fail http://0.0.0.0:${APP_PORT}/ || exit 1
      interval: 40s
      timeout: 30s
      retries: 3
      start_period: 60s
    depends_on:
      db:
        condition: service_healthy
    networks:
      - network_back

  db:
    image: postgres:13
    container_name: ${DB_CONT_NAME}
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 10s
      timeout: 3s
      retries: 3
    volumes:
      - postgres-vol:/var/lib/postgresql/data/:Z
    networks:
      - network_back

  nginx:
    container_name: ${NGINX_CONT_NAME}
    build:
      context: ../../nginx/local
      dockerfile: Dockerfile
    environment:
      - HOST_NAME=${APP_CONT_NAME}
      - PORT=${APP_PORT}
    ports:
      - "8001:80"
    networks:
      - network_front
      - network_back
    depends_on:
      - app

networks:
  network_front:
    driver: bridge
    name: app_network_front
  network_back:
    driver: bridge
    internal: true
    name: app_network_back

volumes:
  postgres-vol:
